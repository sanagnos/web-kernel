THREE.ObjectLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(e,r){var t=this,a=new THREE.XHRLoader(t.manager);a.setCrossOrigin(this.crossOrigin),a.load(e,function(e){r(t.parse(JSON.parse(e)))})},setCrossOrigin:function(e){this.crossOrigin=e},parse:function(e){var r=this.parseGeometries(e.geometries),t=this.parseMaterials(e.materials),a=this.parseObject(e.object,r,t);return a},parseGeometries:function(e){var r={};if(void 0!==e)for(var t=new THREE.JSONLoader,a=new THREE.BufferGeometryLoader,i=0,o=e.length;o>i;i++){var n,s=e[i];switch(s.type){case"PlaneGeometry":n=new THREE.PlaneGeometry(s.width,s.height,s.widthSegments,s.heightSegments);break;case"BoxGeometry":case"CubeGeometry":n=new THREE.BoxGeometry(s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case"CircleGeometry":n=new THREE.CircleGeometry(s.radius,s.segments);break;case"CylinderGeometry":n=new THREE.CylinderGeometry(s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded);break;case"SphereGeometry":n=new THREE.SphereGeometry(s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case"IcosahedronGeometry":n=new THREE.IcosahedronGeometry(s.radius,s.detail);break;case"TorusGeometry":n=new THREE.TorusGeometry(s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case"TorusKnotGeometry":n=new THREE.TorusKnotGeometry(s.radius,s.tube,s.radialSegments,s.tubularSegments,s.p,s.q,s.heightScale);break;case"BufferGeometry":n=a.parse(s.data);break;case"Geometry":n=t.parse(s.data).geometry}n.uuid=s.uuid,void 0!==s.name&&(n.name=s.name),r[s.uuid]=n}return r},parseMaterials:function(e){var r={};if(void 0!==e)for(var t=new THREE.MaterialLoader,a=0,i=e.length;i>a;a++){var o=e[a],n=t.parse(o);n.uuid=o.uuid,void 0!==o.name&&(n.name=o.name),r[o.uuid]=n}return r},parseObject:function(){var e=new THREE.Matrix4;return function(r,t,a){var i;switch(r.type){case"Scene":i=new THREE.Scene;break;case"PerspectiveCamera":i=new THREE.PerspectiveCamera(r.fov,r.aspect,r.near,r.far);break;case"OrthographicCamera":i=new THREE.OrthographicCamera(r.left,r.right,r.top,r.bottom,r.near,r.far);break;case"AmbientLight":i=new THREE.AmbientLight(r.color);break;case"DirectionalLight":i=new THREE.DirectionalLight(r.color,r.intensity);break;case"PointLight":i=new THREE.PointLight(r.color,r.intensity,r.distance);break;case"SpotLight":i=new THREE.SpotLight(r.color,r.intensity,r.distance,r.angle,r.exponent);break;case"HemisphereLight":i=new THREE.HemisphereLight(r.color,r.groundColor,r.intensity);break;case"Mesh":var o=t[r.geometry],n=a[r.material];void 0===o&&console.error("THREE.ObjectLoader: Undefined geometry "+r.geometry),void 0===n&&console.error("THREE.ObjectLoader: Undefined material "+r.material),i=new THREE.Mesh(o,n);break;case"Sprite":var n=a[r.material];void 0===n&&console.error("THREE.ObjectLoader: Undefined material "+r.material),i=new THREE.Sprite(n);break;default:i=new THREE.Object3D}if(i.uuid=r.uuid,void 0!==r.name&&(i.name=r.name),void 0!==r.matrix?(e.fromArray(r.matrix),e.decompose(i.position,i.quaternion,i.scale)):(void 0!==r.position&&i.position.fromArray(r.position),void 0!==r.rotation&&i.rotation.fromArray(r.rotation),void 0!==r.scale&&i.scale.fromArray(r.scale)),void 0!==r.visible&&(i.visible=r.visible),void 0!==r.userData&&(i.userData=r.userData),void 0!==r.children)for(var s in r.children)i.add(this.parseObject(r.children[s],t,a));return i}}()};